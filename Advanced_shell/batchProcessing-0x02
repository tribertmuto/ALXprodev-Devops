#!/bin/bash

# Batch Pokémon Data Retrieval - Task 2 & 4
# Fetches data for multiple Pokémon with error handling and retry logic

# Create pokemon_data directory
mkdir -p pokemon_data

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base API URL
BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Error log file
ERROR_LOG="errors.txt"

# Function to fetch Pokémon data with retry logic
fetch_pokemon() {
    local pokemon_name="$1"
    local output_file="pokemon_data/${pokemon_name}.json"
    local max_retries=3
    local retry_count=0
    
    echo "Fetching data for $pokemon_name..."
    
    while [ $retry_count -lt $max_retries ]; do
        if curl -s -f "${BASE_URL}/${pokemon_name}" > "$output_file" 2>/dev/null; then
            echo "Saved data to $output_file ✅"
            return 0
        else
            retry_count=$((retry_count + 1))
            echo "Attempt $retry_count failed for $pokemon_name"
            
            if [ $retry_count -lt $max_retries ]; then
                echo "Retrying in 2 seconds..."
                sleep 2
            fi
        fi
    done
    
    # All retries failed
    echo "Failed to fetch data for $pokemon_name after $max_retries attempts ❌"
    echo "$(date): Failed to fetch $pokemon_name after $max_retries attempts" >> "$ERROR_LOG"
    return 1
}

# Main execution
echo "Starting batch Pokémon data retrieval with error handling..."
echo "=========================================================="

for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon"
    
    # Add delay between requests to avoid rate limiting
    if [ "$pokemon" != "${POKEMON_LIST[-1]}" ]; then
        sleep 1
    fi
done

echo "=========================================================="
echo "Batch retrieval completed!"

# Check if any errors occurred
if [ -f "$ERROR_LOG" ] && [ -s "$ERROR_LOG" ]; then
    echo "Some errors occurred during the process. Check $ERROR_LOG for details."
fi 