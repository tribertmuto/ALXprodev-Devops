#!/bin/bash

# Parallel Data Fetching - Task 5
# Fetches Pokémon data in parallel using background processes

# Create pokemon_data directory
mkdir -p pokemon_data

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base API URL
BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Error log file
ERROR_LOG="errors.txt"

# Array to store background process IDs
declare -a pids

# Function to fetch Pokémon data
fetch_pokemon_parallel() {
    local pokemon_name="$1"
    local output_file="pokemon_data/${pokemon_name}.json"
    
    echo "Starting fetch for $pokemon_name (PID: $$)..."
    
    if curl -s -f "${BASE_URL}/${pokemon_name}" > "$output_file" 2>/dev/null; then
        echo "✅ $pokemon_name: Data saved to $output_file"
    else
        echo "❌ $pokemon_name: Failed to fetch data"
        echo "$(date): Failed to fetch $pokemon_name" >> "$ERROR_LOG"
    fi
}

# Main execution
echo "Starting parallel Pokémon data retrieval..."
echo "=========================================="

# Start background processes for each Pokémon
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_parallel "$pokemon" &
    pids+=($!)
done

echo "Started ${#pids[@]} background processes"
echo "Waiting for all processes to complete..."

# Wait for all background processes to complete
for pid in "${pids[@]}"; do
    wait $pid
    if [ $? -eq 0 ]; then
        echo "Process $pid completed successfully"
    else
        echo "Process $pid failed"
    fi
done

echo "=========================================="
echo "Parallel retrieval completed!"

# Check if any errors occurred
if [ -f "$ERROR_LOG" ] && [ -s "$ERROR_LOG" ]; then
    echo "Some errors occurred during the process. Check $ERROR_LOG for details."
fi

# Display summary
echo ""
echo "Summary of downloaded files:"
ls -la pokemon_data/*.json 2>/dev/null || echo "No JSON files found" 