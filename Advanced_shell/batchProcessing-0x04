#!/bin/bash

# Parallel Data Fetching - Task 5
# Fetches Pokémon data in parallel using background processes

# Create pokemon_data directory
mkdir -p pokemon_data

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base API URL
BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Error log file
ERROR_LOG="errors.txt"

# Signal handler to clean up background jobs on script termination
cleanup() {
    echo ""
    echo "Script interrupted. Cleaning up background jobs..."
    kill_all_jobs
    exit 1
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Function to fetch Pokémon data
fetch_pokemon_parallel() {
    local pokemon_name="$1"
    local output_file="pokemon_data/${pokemon_name}.json"
    
    echo "Starting fetch for $pokemon_name (PID: $$)..."
    
    if curl -s -f "${BASE_URL}/${pokemon_name}" > "$output_file" 2>/dev/null; then
        echo "✅ $pokemon_name: Data saved to $output_file"
    else
        echo "❌ $pokemon_name: Failed to fetch data"
        echo "$(date): Failed to fetch $pokemon_name" >> "$ERROR_LOG"
    fi
}

# Function to check and manage background jobs
check_jobs() {
    echo "Current background jobs:"
    jobs -l
    
    # Check if any jobs are still running
    if jobs -r | grep -q .; then
        echo "Some jobs are still running..."
        return 0
    else
        echo "All jobs completed!"
        return 1
    fi
}

# Function to kill all background jobs if needed
kill_all_jobs() {
    echo "Killing all background jobs..."
    jobs -p | xargs -r kill
    echo "All background jobs terminated."
}

# Main execution
echo "Starting parallel Pokémon data retrieval..."
echo "=========================================="

# Start background processes for each Pokémon
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_parallel "$pokemon" &
    echo "Started background job for $pokemon (Job ID: $!)"
done

echo "Started background processes for all Pokémon"
echo "Current jobs status:"
jobs -l

echo ""
echo "Waiting for all processes to complete..."

# Monitor jobs and wait for completion with timeout
timeout_counter=0
max_timeout=60  # 60 seconds timeout

while check_jobs && [ $timeout_counter -lt $max_timeout ]; do
    sleep 2
    timeout_counter=$((timeout_counter + 2))
done

# Check if we timed out
if [ $timeout_counter -ge $max_timeout ]; then
    echo "⚠️  Timeout reached. Some jobs may still be running."
    echo "Current jobs status:"
    jobs -l
    
    # Ask if user wants to kill remaining jobs
    echo "Do you want to kill remaining jobs? (y/n)"
    read -t 10 -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        kill_all_jobs
    fi
fi

echo "=========================================="
echo "Parallel retrieval completed!"

# Check if any errors occurred
if [ -f "$ERROR_LOG" ] && [ -s "$ERROR_LOG" ]; then
    echo "Some errors occurred during the process. Check $ERROR_LOG for details."
fi

# Display summary
echo ""
echo "Summary of downloaded files:"
ls -la pokemon_data/*.json 2>/dev/null || echo "No JSON files found" 